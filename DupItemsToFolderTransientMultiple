-- Copy selected items to child tracks of selected parent folder
-- Cycles through available child tracks, moving 3 seconds forward each cycle
-- Each item gets transients aligned to edit cursor position
-- Script by User - Cycling Version

-- Function to find first transient in item using REAPER's built-in detection
function find_first_transient(item)
    -- Check if item is valid
    if not item or not reaper.ValidatePtr2(0, item, "MediaItem*") then
        return 0
    end
    
    local take = reaper.GetActiveTake(item)
    if not take then return 0 end
    
    -- Store current edit cursor position
    local original_cursor = reaper.GetCursorPosition()
    
    -- Get item position and length
    local item_pos = reaper.GetMediaItemInfo_Value(item, "D_POSITION")
    local item_length = reaper.GetMediaItemInfo_Value(item, "D_LENGTH")
    
    -- Store current item selections
    local original_selections = {}
    local num_selected = reaper.CountSelectedMediaItems(0)
    for i = 0, num_selected - 1 do
        local sel_item = reaper.GetSelectedMediaItem(0, i)
        table.insert(original_selections, sel_item)
    end
    
    -- Clear all selections and select only this item
    reaper.SelectAllMediaItems(0, false)
    reaper.SetMediaItemSelected(item, true)
    
    -- Move cursor to item start
    reaper.SetEditCurPos(item_pos, false, false)
    
    -- Use REAPER's "Go to next transient in items" command
    reaper.Main_OnCommand(40375, 0)  -- Item navigation: Move cursor to next transient in items
    
    -- Get the new cursor position (should be at the first transient)
    local transient_pos = reaper.GetCursorPosition()
    
    -- Calculate offset from item start to transient
    local transient_offset = transient_pos - item_pos
    
    -- If the cursor didn't move or moved beyond the item, there's no transient detected
    if transient_offset <= 0 or transient_offset >= item_length then
        transient_offset = 0
    end
    
    -- Restore original selections
    reaper.SelectAllMediaItems(0, false)
    for _, sel_item in ipairs(original_selections) do
        reaper.SetMediaItemSelected(sel_item, true)
    end
    
    -- Restore original cursor position
    reaper.SetEditCurPos(original_cursor, false, false)
    
    return transient_offset
end

-- Function to get all child tracks within a folder
function get_child_tracks(parent_folder)
    local child_tracks = {}
    local num_tracks = reaper.CountTracks(0)
    local parent_idx = reaper.GetMediaTrackInfo_Value(parent_folder, "IP_TRACKNUMBER") - 1
    
    local track_idx = parent_idx + 1
    local folder_level = 1
    
    while track_idx < num_tracks do
        local track = reaper.GetTrack(0, track_idx)
        local folder_depth = reaper.GetMediaTrackInfo_Value(track, "I_FOLDERDEPTH")
        
        -- Add this track as a child
        table.insert(child_tracks, track)
        
        -- Adjust folder level based on folder depth
        folder_level = folder_level + folder_depth
        
        -- If we've closed the parent folder, break
        if folder_level <= 0 then
            break
        end
        
        track_idx = track_idx + 1
    end
    
    return child_tracks
end

-- Function to duplicate an item to a specific track at a specific position
function duplicate_item_to_track(source_item, target_track, new_pos, item_length)
    -- Add item to target track
    local new_item = reaper.AddMediaItemToTrack(target_track)
    
    -- Copy all properties from source item
    reaper.SetMediaItemInfo_Value(new_item, "D_POSITION", new_pos)
    reaper.SetMediaItemInfo_Value(new_item, "D_LENGTH", item_length)
    reaper.SetMediaItemInfo_Value(new_item, "D_SNAPOFFSET", reaper.GetMediaItemInfo_Value(source_item, "D_SNAPOFFSET"))
    reaper.SetMediaItemInfo_Value(new_item, "D_FADEINLEN", reaper.GetMediaItemInfo_Value(source_item, "D_FADEINLEN"))
    reaper.SetMediaItemInfo_Value(new_item, "D_FADEOUTLEN", reaper.GetMediaItemInfo_Value(source_item, "D_FADEOUTLEN"))
    reaper.SetMediaItemInfo_Value(new_item, "D_FADEINDIR", reaper.GetMediaItemInfo_Value(source_item, "D_FADEINDIR"))
    reaper.SetMediaItemInfo_Value(new_item, "D_FADEOUTDIR", reaper.GetMediaItemInfo_Value(source_item, "D_FADEOUTDIR"))
    reaper.SetMediaItemInfo_Value(new_item, "D_VOL", reaper.GetMediaItemInfo_Value(source_item, "D_VOL"))
    reaper.SetMediaItemInfo_Value(new_item, "B_MUTE", reaper.GetMediaItemInfo_Value(source_item, "B_MUTE"))
    reaper.SetMediaItemInfo_Value(new_item, "B_LOOPSRC", reaper.GetMediaItemInfo_Value(source_item, "B_LOOPSRC"))
    reaper.SetMediaItemInfo_Value(new_item, "B_ALLTAKESPLAY", reaper.GetMediaItemInfo_Value(source_item, "B_ALLTAKESPLAY"))
    reaper.SetMediaItemInfo_Value(new_item, "B_UISEL", reaper.GetMediaItemInfo_Value(source_item, "B_UISEL"))
    reaper.SetMediaItemInfo_Value(new_item, "C_LOCK", reaper.GetMediaItemInfo_Value(source_item, "C_LOCK"))
    
    -- Copy takes from source item
    local num_takes = reaper.CountTakes(source_item)
    for take_idx = 0, num_takes - 1 do
        local source_take = reaper.GetTake(source_item, take_idx)
        if source_take then
            local source_src = reaper.GetMediaItemTake_Source(source_take)
            
            -- Add take to new item
            local new_take = reaper.AddTakeToMediaItem(new_item)
            reaper.SetMediaItemTake_Source(new_take, source_src)
            
            -- Copy take properties
            reaper.SetMediaItemTakeInfo_Value(new_take, "D_STARTOFFS", reaper.GetMediaItemTakeInfo_Value(source_take, "D_STARTOFFS"))
            reaper.SetMediaItemTakeInfo_Value(new_take, "D_VOL", reaper.GetMediaItemTakeInfo_Value(source_take, "D_VOL"))
            reaper.SetMediaItemTakeInfo_Value(new_take, "D_PAN", reaper.GetMediaItemTakeInfo_Value(source_take, "D_PAN"))
            reaper.SetMediaItemTakeInfo_Value(new_take, "D_PANLAW", reaper.GetMediaItemTakeInfo_Value(source_take, "D_PANLAW"))
            reaper.SetMediaItemTakeInfo_Value(new_take, "D_PLAYRATE", reaper.GetMediaItemTakeInfo_Value(source_take, "D_PLAYRATE"))
            reaper.SetMediaItemTakeInfo_Value(new_take, "D_PITCH", reaper.GetMediaItemTakeInfo_Value(source_take, "D_PITCH"))
            reaper.SetMediaItemTakeInfo_Value(new_take, "B_PPITCH", reaper.GetMediaItemTakeInfo_Value(source_take, "B_PPITCH"))
            reaper.SetMediaItemTakeInfo_Value(new_take, "I_CHANMODE", reaper.GetMediaItemTakeInfo_Value(source_take, "I_CHANMODE"))
            reaper.SetMediaItemTakeInfo_Value(new_take, "I_PITCHMODE", reaper.GetMediaItemTakeInfo_Value(source_take, "I_PITCHMODE"))
            
            -- Copy take name
            local retval, take_name = reaper.GetSetMediaItemTakeInfo_String(source_take, "P_NAME", "", false)
            reaper.GetSetMediaItemTakeInfo_String(new_take, "P_NAME", take_name, true)
            
            -- Set as active take if it was active in source
            if source_take == reaper.GetActiveTake(source_item) then
                reaper.SetActiveTake(new_take)
            end
        end
    end
    
    -- Update the item after adding all takes
    reaper.UpdateItemInProject(new_item)
    
    return new_item
end

function main()
    -- Check if we have selected items
    local num_items = reaper.CountSelectedMediaItems(0)
    if num_items == 0 then
        reaper.ShowMessageBox("No items selected", "Error", 0)
        return
    end
    
    -- Find the selected parent folder track
    local parent_folder = nil
    local num_tracks = reaper.CountTracks(0)
    
    for i = 0, num_tracks - 1 do
        local track = reaper.GetTrack(0, i)
        if reaper.IsTrackSelected(track) and reaper.GetMediaTrackInfo_Value(track, "I_FOLDERDEPTH") == 1 then
            parent_folder = track
            break
        end
    end
    
    if not parent_folder then
        reaper.ShowMessageBox("No parent folder track selected", "Error", 0)
        return
    end
    
    -- Get child tracks within the folder
    local child_tracks = get_child_tracks(parent_folder)
    
    if #child_tracks == 0 then
        reaper.ShowMessageBox("No child tracks found in selected folder", "Error", 0)
        return
    end
    
    -- Store original edit cursor position
    local original_cursor = reaper.GetCursorPosition()
    local current_cursor = original_cursor
    
    -- Start undo block
    reaper.Undo_BeginBlock()
    
    -- Store information about each selected item
    local items_data = {}
    for i = 0, num_items - 1 do
        local item = reaper.GetSelectedMediaItem(0, i)
        
        -- Validate the item before processing
        if item and reaper.ValidatePtr2(0, item, "MediaItem*") then
            local item_pos = reaper.GetMediaItemInfo_Value(item, "D_POSITION")
            local item_length = reaper.GetMediaItemInfo_Value(item, "D_LENGTH")
            
            -- Find the first transient in the audio using REAPER's detection
            local transient_offset = find_first_transient(item)
            
            table.insert(items_data, {
                item = item,
                position = item_pos,
                length = item_length,
                transient_offset = transient_offset
            })
        end
    end
    
    -- Check if we have any valid items
    if #items_data == 0 then
        reaper.ShowMessageBox("No valid items found", "Error", 0)
        reaper.Undo_EndBlock("Copy items to folder child tracks with transient alignment (cycling)", -1)
        return
    end
    
    -- Cycle through items and place them
    local item_index = 1
    local cycle_count = 0
    
    while item_index <= #items_data do
        -- Calculate how many items we can place in this cycle
        local items_remaining = #items_data - item_index + 1
        local items_to_place = math.min(items_remaining, #child_tracks)
        
        -- Place items in available child tracks
        for track_idx = 1, items_to_place do
            local item_info = items_data[item_index]
            local target_track = child_tracks[track_idx]
            
            -- Position the new item so the detected transient aligns with the current cursor
            local new_pos = current_cursor - item_info.transient_offset
            
            -- Duplicate the item to the target track
            duplicate_item_to_track(item_info.item, target_track, new_pos, item_info.length)
            
            item_index = item_index + 1
        end
        
        -- If there are more items to place, move cursor forward 3 seconds
        if item_index <= #items_data then
            current_cursor = current_cursor + 3.0  -- Move 3 seconds forward
            cycle_count = cycle_count + 1
        end
    end
    
    -- Restore original item selections
    reaper.SelectAllMediaItems(0, false)
    for i = 1, #items_data do
        reaper.SetMediaItemSelected(items_data[i].item, true)
    end
    
    -- Set cursor to the final position (last cycle position)
    reaper.SetEditCurPos(current_cursor, false, false)
    
    -- Update arrange view
    reaper.UpdateArrange()
    
    -- End undo block
    local cycles_text = cycle_count > 0 and (" (" .. (cycle_count + 1) .. " cycles)") or ""
    reaper.Undo_EndBlock("Copy items to folder child tracks with transient alignment (cycling)" .. cycles_text, -1)
    
    -- Success - no popup message needed
end

-- Initialize random seed
math.randomseed(os.time())

-- Run the main function
main()
