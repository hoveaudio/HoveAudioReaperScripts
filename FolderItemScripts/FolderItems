--[[
  ReaScript Name: Folder items (Optimized for Reaper 7.42) - Fixed Multi-Selection & Undo
  Author: BFO, LKC, Optimized by Claude
  REAPER: 7.42+
  Version: 1.14 - Fixed Undo Support
  About:
    # Simulates folder items behaviour from Cubase - Fixed Selection & Undo Version
    # FIXED: Proper multi-selection support - select multiple folder items normally
    # FIXED: Shift+click and Ctrl+click work exactly like standard REAPER items
    # FIXED: No single folder item takes priority over others
    # FIXED: Comprehensive undo support for all folder item operations
    # FIXED: CMD+Z now works properly for all folder item actions
    # STICKY COLORS: Custom item colors are preserved permanently
]]

-- USER VARIABLES ----------------------------------------------------------
local item_luminance = 0.8
local userChildrenSelection = true
local wholeItemEnabled = false
local drawWholeFromProjectStart = true
local partialItemsPosition = 0
local partialItemsHeight = 0.5
local wholeItemPosition = 0.5
local wholeItemHeight = 0.5
local g_namePrefix = "["
local g_nameSuffix = "]"
local stretchText = false
local scriptStep = 0.1
local nameLength = 1

-- GLOBAL STATE VARIABLES
local prevState = 0
local folders = {}
local prevMerged = {}
local script_should_exit = false
local sectionID, cmdID
local lastProcessTime = 0
local processingItems = false
local lastSelectionTime = 0
local selectionProcessing = false
local lastSelectedFolderItems = {}

-- Safety limits
local MAX_TRACKS = 1000
local MAX_ITEMS_PER_TRACK = 10000
local MAX_RECURSION_DEPTH = 50

-- Project state key for storing custom colors
local PROJ_STATE_KEY = "FolderItems_CustomColors"

-- Utility functions
local function safeGetTrack(index)
    if index < 0 or index >= reaper.CountTracks(0) then
        return nil
    end
    return reaper.GetTrack(0, index)
end

local function safeGetTrackMediaItem(track, index)
    if not track or index < 0 or index >= reaper.CountTrackMediaItems(track) then
        return nil
    end
    return reaper.GetTrackMediaItem(track, index)
end

local function safeGetMediaItemInfo_Value(item, param)
    if not item then return 0 end
    return reaper.GetMediaItemInfo_Value(item, param)
end

local function safeSetMediaItemInfo_Value(item, param, value)
    if not item then return false end
    return reaper.SetMediaItemInfo_Value(item, param, value)
end

-- Color utility functions
local function rgbToHsl(r, g, b)
    local max, min = math.max(r, g, b), math.min(r, g, b)
    local h, s, l = 0, 0, (max + min) / 2
    
    if max ~= min then
        local d = max - min
        s = l > 0.5 and d / (2 - max - min) or d / (max + min)
        if max == r then
            h = (g - b) / d + (g < b and 6 or 0)
        elseif max == g then
            h = (b - r) / d + 2
        elseif max == b then
            h = (r - g) / d + 4
        end
        h = h / 6
    end
    
    return h, s, l
end

local function hslToRgb(h, s, l)
    local r, g, b
    
    if s == 0 then
        r, g, b = l, l, l
    else
        local function hue2rgb(p, q, t)
            if t < 0 then t = t + 1 end
            if t > 1 then t = t - 1 end
            if t < 1/6 then return p + (q - p) * 6 * t end
            if t < 1/2 then return q end
            if t < 2/3 then return p + (q - p) * (2/3 - t) * 6 end
            return p
        end
        
        local q = l < 0.5 and l * (1 + s) or l + s - l * s
        local p = 2 * l - q
        r = hue2rgb(p, q, h + 1/3)
        g = hue2rgb(p, q, h)
        b = hue2rgb(p, q, h - 1/3)
    end
    
    return r, g, b
end

local function makeItemColorDark(item)
    if not item then return end
    
    local color = reaper.GetDisplayedMediaItemColor(item)
    if not color or color == 0 then return end
    
    local R, G, B = reaper.ColorFromNative(color)
    local h, s, l = rgbToHsl(R/255, G/255, B/255)
    local r, g, b = hslToRgb(h, s, item_luminance)
    
    local new_color = reaper.ColorToNative(
        math.floor(r * 255),
        math.floor(g * 255),
        math.floor(b * 255)
    ) | 0x1000000
    
    safeSetMediaItemInfo_Value(item, "I_CUSTOMCOLOR", new_color)
end

-- Custom color persistence functions
local function getItemIdentifier(item)
    if not item then return nil end
    
    local track = reaper.GetMediaItem_Track(item)
    if not track then return nil end
    
    local trackNum = reaper.GetMediaTrackInfo_Value(track, "IP_TRACKNUMBER")
    local pos = safeGetMediaItemInfo_Value(item, "D_POSITION")
    local len = safeGetMediaItemInfo_Value(item, "D_LENGTH")
    
    return string.format("%.0f_%.6f_%.6f", trackNum, pos, len)
end

local function loadCustomColors()
    local retval, colorData = reaper.GetProjExtState(0, PROJ_STATE_KEY, "colors")
    local customColors = {}
    
    if retval and colorData ~= "" then
        for identifier, color in string.gmatch(colorData, "([^:]+):([^;]+);?") do
            customColors[identifier] = tonumber(color)
        end
    end
    
    return customColors
end

local function saveCustomColors(customColors)
    local colorData = ""
    for identifier, color in pairs(customColors) do
        colorData = colorData .. identifier .. ":" .. tostring(color) .. ";"
    end
    reaper.SetProjExtState(0, PROJ_STATE_KEY, "colors", colorData)
end

local function hasCustomColor(item, customColors)
    local identifier = getItemIdentifier(item)
    return identifier and customColors[identifier] ~= nil
end

local function storeCustomColor(item, customColors)
    local identifier = getItemIdentifier(item)
    if identifier then
        local color = safeGetMediaItemInfo_Value(item, "I_CUSTOMCOLOR")
        if color ~= 0 then
            customColors[identifier] = color
            saveCustomColors(customColors)
            return true
        end
    end
    return false
end

local function applyCustomColor(item, customColors)
    local identifier = getItemIdentifier(item)
    if identifier and customColors[identifier] then
        safeSetMediaItemInfo_Value(item, "I_CUSTOMCOLOR", customColors[identifier])
        return true
    end
    return false
end

local function detectUserColorChange(item, customColors)
    local identifier = getItemIdentifier(item)
    if not identifier then return false end
    
    local currentColor = safeGetMediaItemInfo_Value(item, "I_CUSTOMCOLOR")
    local storedColor = customColors[identifier]
    
    if storedColor and currentColor ~= storedColor and currentColor ~= 0 then
        customColors[identifier] = currentColor
        saveCustomColors(customColors)
        return true
    end
    
    if not storedColor and currentColor ~= 0 then
        customColors[identifier] = currentColor
        saveCustomColors(customColors)
        return true
    end
    
    return false
end

local function preserveExistingColor(item, customColors)
    local currentColor = safeGetMediaItemInfo_Value(item, "I_CUSTOMCOLOR")
    if currentColor ~= 0 then
        storeCustomColor(item, customColors)
        return true
    end
    return false
end

-- Item management functions
local function fillInName(item, text)
    if not item or not text or text == "" then return end
    
    local textLong = g_namePrefix .. text .. g_nameSuffix
    for i = 1, nameLength - 1 do
        textLong = textLong .. " ... " .. text
    end
    
    local retval, chunk = reaper.GetItemStateChunk(item, "", false)
    if retval then
        local newChunk = chunk:gsub(">\n", ">\n<NOTES\n" .. textLong .. "\n>\n", 1)
        reaper.SetItemStateChunk(item, newChunk, false)
    end
end

local function itemContains(parentItem, childItem)
    if not parentItem or not childItem then return false end
    
    local parentStart = safeGetMediaItemInfo_Value(parentItem, "D_POSITION")
    local parentLength = safeGetMediaItemInfo_Value(parentItem, "D_LENGTH")
    local parentEnd = parentStart + parentLength
    
    local childStart = safeGetMediaItemInfo_Value(childItem, "D_POSITION")
    local childLength = safeGetMediaItemInfo_Value(childItem, "D_LENGTH")
    local childEnd = childStart + childLength
    
    return parentStart <= childStart and childEnd <= parentEnd
end

local function emptyItemExists(startPos, endPos, track)
    if not track or not startPos or not endPos then return false end
    
    local tolerance = 0.001
    local itemCount = reaper.CountTrackMediaItems(track)
    
    for i = 0, math.min(itemCount - 1, MAX_ITEMS_PER_TRACK) do
        local item = safeGetTrackMediaItem(track, i)
        if item and reaper.CountTakes(item) == 0 then
            local itemStart = safeGetMediaItemInfo_Value(item, "D_POSITION")
            local itemLength = safeGetMediaItemInfo_Value(item, "D_LENGTH")
            local itemEnd = itemStart + itemLength
            
            if math.abs(itemStart - startPos) < tolerance and 
               math.abs(itemEnd - endPos) < tolerance then
                return item
            end
        end
    end
    
    return false
end

local function isFolderItem(item)
    if not item then return false end
    
    local track = reaper.GetMediaItem_Track(item)
    if not track then return false end
    
    return reaper.CountTakes(item) == 0 and 
           reaper.GetMediaTrackInfo_Value(track, "I_FOLDERDEPTH") == 1
end

local function getCurrentlySelectedFolderItems()
    local folderItems = {}
    local totalSelectedItems = reaper.CountSelectedMediaItems(0)
    
    for i = 0, totalSelectedItems - 1 do
        local item = reaper.GetSelectedMediaItem(0, i)
        if item and isFolderItem(item) then
            table.insert(folderItems, item)
        end
    end
    
    return folderItems
end

local function getChildItemsForFolderItem(folderItem)
    if not folderItem then return {} end
    
    local folderTrack = reaper.GetMediaItem_Track(folderItem)
    if not folderTrack then return {} end
    
    local childItems = {}
    local folderTrackNum = reaper.GetMediaTrackInfo_Value(folderTrack, "IP_TRACKNUMBER") - 1
    local depth = 0
    local trackIndex = 1
    
    while depth >= 0 and trackIndex < MAX_TRACKS do
        local track = safeGetTrack(folderTrackNum + trackIndex)
        if not track then break end
        
        local itemCount = reaper.CountTrackMediaItems(track)
        for i = 0, math.min(itemCount - 1, MAX_ITEMS_PER_TRACK) do
            local item = safeGetTrackMediaItem(track, i)
            if item and itemContains(folderItem, item) then
                table.insert(childItems, item)
            end
        end
        
        depth = depth + reaper.GetMediaTrackInfo_Value(track, "I_FOLDERDEPTH")
        trackIndex = trackIndex + 1
    end
    
    return childItems
end

-- Fixed selection system that creates proper undo points
local function processCurrentSelection()
    if _G.FOLDER_ITEMS_DISABLE_CHILD_SELECTION or 
       reaper.GetProjExtState(0, "FolderItems", "DisableChildSelection") == "1" or
       not userChildrenSelection then 
        return 
    end
    
    if processingItems or selectionProcessing then return end
    
    local currentTime = reaper.time_precise()
    if currentTime - lastSelectionTime < 0.1 then return end
    
    selectionProcessing = true
    lastSelectionTime = currentTime
    
    local selectedFolderItems = getCurrentlySelectedFolderItems()
    
    local selectionChanged = false
    if #selectedFolderItems ~= #lastSelectedFolderItems then
        selectionChanged = true
    else
        for i, item in ipairs(selectedFolderItems) do
            local found = false
            for j, lastItem in ipairs(lastSelectedFolderItems) do
                if item == lastItem then
                    found = true
                    break
                end
            end
            if not found then
                selectionChanged = true
                break
            end
        end
    end
    
    if selectionChanged then
        lastSelectedFolderItems = {}
        for _, item in ipairs(selectedFolderItems) do
            table.insert(lastSelectedFolderItems, item)
        end
        
        local allChildItems = {}
        local childItemsMap = {}
        
        for _, folderItem in ipairs(selectedFolderItems) do
            local childItems = getChildItemsForFolderItem(folderItem)
            for _, childItem in ipairs(childItems) do
                if not childItemsMap[childItem] then
                    childItemsMap[childItem] = true
                    table.insert(allChildItems, childItem)
                end
            end
        end
        
        -- Only create undo point if there are actual changes to selection
        if #allChildItems > 0 or #selectedFolderItems > 0 then
            reaper.Undo_BeginBlock()
            
            reaper.SelectAllMediaItems(0, false)
            
            for _, folderItem in ipairs(selectedFolderItems) do
                reaper.SetMediaItemSelected(folderItem, true)
            end
            
            for _, childItem in ipairs(allChildItems) do
                reaper.SetMediaItemSelected(childItem, true)
            end
            
            reaper.UpdateArrange()
            reaper.Undo_EndBlock("Select Folder Items and Children", 4) -- 4 = item selection
        end
    end
    
    selectionProcessing = false
end

local function collectChildItems(folderTrack, recursionDepth)
    if not folderTrack or recursionDepth > MAX_RECURSION_DEPTH then 
        return {}
    end
    
    local items = {}
    local folderTrackNum = reaper.GetMediaTrackInfo_Value(folderTrack, "IP_TRACKNUMBER") - 1
    local depth = 0
    local trackIndex = 1
    
    while depth >= 0 and trackIndex < MAX_TRACKS do
        local track = safeGetTrack(folderTrackNum + trackIndex)
        if not track then break end
        
        if reaper.GetMediaTrackInfo_Value(track, "I_FOLDERDEPTH") == 1 then
            local nestedItems = collectChildItems(track, recursionDepth + 1)
            for _, item in ipairs(nestedItems) do
                table.insert(items, item)
            end
        end
        
        local itemCount = reaper.CountTrackMediaItems(track)
        for i = 0, math.min(itemCount - 1, MAX_ITEMS_PER_TRACK) do
            local item = safeGetTrackMediaItem(track, i)
            if item then
                local startPos = safeGetMediaItemInfo_Value(item, "D_POSITION")
                local length = safeGetMediaItemInfo_Value(item, "D_LENGTH")
                local selected = reaper.IsMediaItemSelected(item)
                
                table.insert(items, {
                    start = startPos,
                    ending = startPos + length,
                    selected = selected
                })
            end
        end
        
        depth = depth + reaper.GetMediaTrackInfo_Value(track, "I_FOLDERDEPTH")
        trackIndex = trackIndex + 1
    end
    
    table.sort(items, function(a, b) return a.start < b.start end)
    
    local merged = {}
    for _, item in ipairs(items) do
        if #merged == 0 then
            table.insert(merged, item)
        else
            local lastItem = merged[#merged]
            if item.start <= lastItem.ending then
                lastItem.ending = math.max(lastItem.ending, item.ending)
                lastItem.selected = lastItem.selected and item.selected
            else
                table.insert(merged, item)
            end
        end
    end
    
    return merged
end

local function detectAndStoreColorChanges(customColors)
    for i = 0, reaper.CountTracks(0) - 1 do
        local track = safeGetTrack(i)
        if track and reaper.GetMediaTrackInfo_Value(track, "I_FOLDERDEPTH") == 1 then
            local itemCount = reaper.CountTrackMediaItems(track)
            for j = 0, math.min(itemCount - 1, MAX_ITEMS_PER_TRACK) do
                local item = safeGetTrackMediaItem(track, j)
                if item and reaper.CountTakes(item) == 0 then
                    detectUserColorChange(item, customColors)
                end
            end
        end
    end
end

local function processFolderTrack(folderTrack, customColors, undoActive)
    if not folderTrack then return false end
    
    local trackGUID = reaper.GetTrackGUID(folderTrack)
    if not trackGUID then return false end
    
    folders[trackGUID] = true
    
    local childItems = collectChildItems(folderTrack, 0)
    if #childItems == 0 then return false end
    
    prevMerged[trackGUID] = {true, childItems}
    
    if wholeItemEnabled then
        reaper.SetMediaTrackInfo_Value(folderTrack, "B_FREEMODE", 1)
    end
    
    local itemCount = reaper.CountTrackMediaItems(folderTrack)
    local hasChanges = false
    
    -- Delete non-selected empty items
    for i = itemCount - 1, 0, -1 do
        local item = safeGetTrackMediaItem(folderTrack, i)
        if item and reaper.CountTakes(item) == 0 then
            preserveExistingColor(item, customColors)
            
            if not reaper.IsMediaItemSelected(item) then
                reaper.DeleteTrackMediaItem(folderTrack, item)
                hasChanges = true
            end
        end
    end
    
    local retval, trackName = reaper.GetSetMediaTrackInfo_String(folderTrack, "P_NAME", "", false)
    if not retval then trackName = "Folder" end
    
    local trackColor = reaper.GetTrackColor(folderTrack)
    
    -- Create/update folder items
    for _, itemInfo in ipairs(childItems) do
        local existingItem = emptyItemExists(itemInfo.start, itemInfo.ending, folderTrack)
        
        if not existingItem then
            local folderItem = reaper.AddMediaItemToTrack(folderTrack)
            if folderItem then
                safeSetMediaItemInfo_Value(folderItem, "D_POSITION", itemInfo.start)
                safeSetMediaItemInfo_Value(folderItem, "D_LENGTH", itemInfo.ending - itemInfo.start)
                
                if not applyCustomColor(folderItem, customColors) then
                    if trackColor ~= 0 then
                        safeSetMediaItemInfo_Value(folderItem, "I_CUSTOMCOLOR", trackColor)
                        makeItemColorDark(folderItem)
                        storeCustomColor(folderItem, customColors)
                    end
                end
                
                fillInName(folderItem, trackName)
                safeSetMediaItemInfo_Value(folderItem, "F_FREEMODE_Y", partialItemsPosition)
                safeSetMediaItemInfo_Value(folderItem, "F_FREEMODE_H", partialItemsHeight)
                hasChanges = true
            end
        else
            detectUserColorChange(existingItem, customColors)
            
            local hasStoredColor = applyCustomColor(existingItem, customColors)
            
            if not hasStoredColor then
                preserveExistingColor(existingItem, customColors)
            end
            
            local currentPos = safeGetMediaItemInfo_Value(existingItem, "D_POSITION")
            local currentLen = safeGetMediaItemInfo_Value(existingItem, "D_LENGTH")
            local expectedLen = itemInfo.ending - itemInfo.start
            
            if math.abs(currentPos - itemInfo.start) > 0.001 or 
               math.abs(currentLen - expectedLen) > 0.001 then
                local colorToPreserve = safeGetMediaItemInfo_Value(existingItem, "I_CUSTOMCOLOR")
                
                safeSetMediaItemInfo_Value(existingItem, "D_POSITION", itemInfo.start)
                safeSetMediaItemInfo_Value(existingItem, "D_LENGTH", expectedLen)
                
                if colorToPreserve ~= 0 then
                    safeSetMediaItemInfo_Value(existingItem, "I_CUSTOMCOLOR", colorToPreserve)
                    storeCustomColor(existingItem, customColors)
                end
                
                hasChanges = true
            end
            
            safeSetMediaItemInfo_Value(existingItem, "F_FREEMODE_Y", partialItemsPosition)
            safeSetMediaItemInfo_Value(existingItem, "F_FREEMODE_H", partialItemsHeight)
        end
    end
    
    -- Handle whole item if enabled
    if wholeItemEnabled and #childItems > 0 then
        local startPos = drawWholeFromProjectStart and 0 or childItems[1].start
        local endPos = childItems[#childItems].ending
        
        local existingWholeItem = emptyItemExists(startPos, endPos, folderTrack)
        
        if not existingWholeItem then
            local wholeItem = reaper.AddMediaItemToTrack(folderTrack)
            if wholeItem then
                safeSetMediaItemInfo_Value(wholeItem, "D_POSITION", startPos)
                safeSetMediaItemInfo_Value(wholeItem, "D_LENGTH", endPos - startPos)
                safeSetMediaItemInfo_Value(wholeItem, "F_FREEMODE_Y", wholeItemPosition)
                safeSetMediaItemInfo_Value(wholeItem, "F_FREEMODE_H", wholeItemHeight)
                
                if not applyCustomColor(wholeItem, customColors) then
                    if trackColor ~= 0 then
                        safeSetMediaItemInfo_Value(wholeItem, "I_CUSTOMCOLOR", trackColor)
                        makeItemColorDark(wholeItem)
                        storeCustomColor(wholeItem, customColors)
                    end
                end
                hasChanges = true
            end
        else
            detectUserColorChange(existingWholeItem, customColors)
            
            local hasStoredColor = applyCustomColor(existingWholeItem, customColors)
            
            if not hasStoredColor then
                preserveExistingColor(existingWholeItem, customColors)
            end
            
            safeSetMediaItemInfo_Value(existingWholeItem, "F_FREEMODE_Y", wholeItemPosition)
            safeSetMediaItemInfo_Value(existingWholeItem, "F_FREEMODE_H", wholeItemHeight)
        end
    end
    
    return hasChanges
end

local function cleanupOldFolders()
    local hasChanges = false
    
    for trackGUID, isActive in pairs(folders) do
        if not isActive then
            local track = reaper.BR_GetMediaTrackByGUID and reaper.BR_GetMediaTrackByGUID(0, trackGUID)
            if track then
                local itemCount = reaper.CountTrackMediaItems(track)
                
                for i = itemCount - 1, 0, -1 do
                    local item = safeGetTrackMediaItem(track, i)
                    if item and reaper.CountTakes(item) == 0 then
                        reaper.DeleteTrackMediaItem(track, item)
                        hasChanges = true
                    end
                end
            end
            folders[trackGUID] = nil
        end
    end
    
    return hasChanges
end

-- Main function with proper undo handling
local function main()
    if script_should_exit then return end
    
    local currentTime = reaper.time_precise()
    
    if currentTime - lastProcessTime < 0.05 then
        reaper.defer(main)
        return
    end
    
    local currentState = reaper.GetProjectStateChangeCount(0)
    if prevState ~= currentState then
        lastProcessTime = currentTime
        
        local customColors = loadCustomColors()
        detectAndStoreColorChanges(customColors)
        
        for guid in pairs(folders) do
            folders[guid] = false
        end
        
        for guid in pairs(prevMerged) do
            if prevMerged[guid] then
                prevMerged[guid][1] = false
            end
        end
        
        reaper.PreventUIRefresh(1)
        
        -- Single undo block for all folder operations
        local hasAnyChanges = false
        
        reaper.Undo_BeginBlock()
        processingItems = true
        
        local trackCount = reaper.CountTracks(0)
        local processedTracks = 0
        
        for i = 0, math.min(trackCount - 1, MAX_TRACKS) do
            if processedTracks > MAX_TRACKS then break end
            
            local track = safeGetTrack(i)
            if track and reaper.GetMediaTrackInfo_Value(track, "I_FOLDERDEPTH") == 1 then
                local trackHasChanges = processFolderTrack(track, customColors, true)
                if trackHasChanges then
                    hasAnyChanges = true
                end
                processedTracks = processedTracks + 1
            end
        end
        
        local cleanupHasChanges = cleanupOldFolders()
        if cleanupHasChanges then
            hasAnyChanges = true
        end
        
        processingItems = false
        
        if hasAnyChanges then
            reaper.Undo_EndBlock("Update Folder Items", -1)
        else
            reaper.Undo_EndBlock("", -1) -- Empty block gets discarded
        end
        
        reaper.PreventUIRefresh(-1)
        reaper.UpdateArrange()
        
        prevState = currentState
    end
    
    -- Process selection changes
    processCurrentSelection()
    
    if not script_should_exit then
        reaper.defer(main)
    end
end

local function exit()
    script_should_exit = true
    
    reaper.Undo_BeginBlock()
    
    local cleanedTracks = 0
    local deletedItems = 0
    
    for i = 0, reaper.CountTracks(0) - 1 do
        local track = safeGetTrack(i)
        if track and reaper.GetMediaTrackInfo_Value(track, "I_FOLDERDEPTH") == 1 then
            local itemCount = reaper.CountTrackMediaItems(track)
            local trackDeletedItems = 0
            
            for j = itemCount - 1, 0, -1 do
                local item = safeGetTrackMediaItem(track, j)
                if item and reaper.CountTakes(item) == 0 then
                    reaper.DeleteTrackMediaItem(track, item)
                    trackDeletedItems = trackDeletedItems + 1
                end
            end
            
            if trackDeletedItems > 0 then
                cleanedTracks = cleanedTracks + 1
                deletedItems = deletedItems + trackDeletedItems
            end
        end
    end
    
    if deletedItems > 0 then
        reaper.Undo_EndBlock(string.format("Cleanup %d Folder Items from %d Tracks", deletedItems, cleanedTracks), -1)
    else
        reaper.Undo_EndBlock("No Folder Items to Cleanup", -1)
    end
    
    reaper.UpdateArrange()
end

-- Register exit function
reaper.atexit(exit)

-- Start the script
main()
